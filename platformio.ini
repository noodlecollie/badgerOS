; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

; A note about the Espressif 32 platform:
; You'd expect that when a platform is released for general use,
; it would compile without warnings and errors. Unfortunately for
; us, this is not the case with the Espressif 32 platform
; beginning from version 3.2.0. At the moment, any references to
; espressif32 are locked to 3.1.1 until this is fixed.

[env]
build_flags =
	-Wall
	-Wextra
	-Werror
	!python getGitHash.py

# Remove the following flags, to allow more warnings for our own code.
build_unflags =
	-Wno-error=unused-but-set-variable
	-Wno-error=unused-variable
	-Wno-error=deprecated-declarations
	-Wno-error=unused-function
	; The following would also be removed, but the ESP32 core throws them >:C
	; -Wno-unused-parameter
	; -Wno-sign-compare

[env:OlimexESP32_SSD1351SanityTest]
; We need a JTAG to debug this, which I don't have right now.
; Instead, let's just make the normal build act like it's in debug,
; so that we get better diagnostics.
build_type = debug
build_flags =
	${env.build_flags}
	-DBGRS_DEBUG
	-DPROG_NAME=SSD1351SanityTest
	-DBOARD_NAME=OlimexESP32
lib_deps =
	Plat_OlimexESP32
	Prog_SSD1351SanityTest
platform = espressif32@3.1.1
board = esp32dev
framework = arduino
monitor_speed = 115200

[env:HeltecWiFiKit32_SSD1351SanityTest]
; We need a JTAG to debug this, which I don't have right now.
; Instead, let's just make the normal build act like it's in debug,
; so that we get better diagnostics.
build_type = debug
build_flags =
	${env.build_flags}
	-DBGRS_DEBUG
	-DPROG_NAME=SSD1351SanityTest
	-DBOARD_NAME=HeltecWiFiKit32
lib_deps =
	Plat_HeltecWiFiKit32
	Prog_SSD1351SanityTest
platform = espressif32@3.1.1
board = heltec_wifi_kit_32
framework = arduino
monitor_speed = 115200

[env:OlimexESP32_InkyImpressionSanityTest]
; We need a JTAG to debug this, which I don't have right now.
; Instead, let's just make the normal build act like it's in debug,
; so that we get better diagnostics.
build_type = debug
build_flags =
	${env.build_flags}
	-DBGRS_DEBUG
	-DPROG_NAME=InkyImpressionSanityTest
	-DBOARD_NAME=OlimexESP32
lib_deps =
	Plat_OlimexESP32
	Prog_InkyImpressionSanityTest
platform = espressif32@3.1.1
board = esp32-devkitlipo
framework = arduino
monitor_speed = 115200

[env:OlimexESP32_BadgeDebug]
; We need a JTAG to debug this, which I don't have right now.
; Instead, let's just make the normal build act like it's in debug,
; so that we get better diagnostics.
build_type = debug
build_flags =
	${env.build_flags}
	-DBGRS_DEBUG
	-DPROG_NAME=Badge
	-DBOARD_NAME=OlimexESP32
	; Use EN-GB language for now
	-DTR_LANGUAGE=EN-GB
lib_deps =
	Plat_OlimexESP32
	Prog_Badge
platform = espressif32@3.1.1
board = esp32-devkitlipo
framework = arduino
monitor_speed = 115200

[env:HeltecWiFiKit32_BadgeDebug]
; We need a JTAG to debug this, which I don't have right now.
; Instead, let's just make the normal build act like it's in debug,
; so that we get better diagnostics.
build_type = debug
build_flags =
	${env.build_flags}
	-DBGRS_DEBUG
	-DPROG_NAME=Badge
	-DBOARD_NAME=HeltecWiFiKit32
	; Use EN-GB language for now
	-DTR_LANGUAGE=EN-GB
lib_deps =
	Plat_HeltecWiFiKit32
	Prog_Badge
platform = espressif32@3.1.1
board = heltec_wifi_kit_32
framework = arduino
monitor_speed = 115200

[env:HeltecWiFiKit32_WifiSoftAPDebug]
build_type = debug
build_flags =
	${env.build_flags}
	-DBGRS_DEBUG
	-DPROG_NAME=WifiSoftAP
	-DBOARD_NAME=HeltecWiFiKit32
	-DTR_LANGUAGE=EN-GB
lib_deps =
	Plat_HeltecWiFiKit32
	Prog_WifiSoftAP
platform = espressif32@3.1.1
board = heltec_wifi_kit_32
framework = arduino
monitor_speed = 115200
